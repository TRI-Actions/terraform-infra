---
name: terraform-infra
description: Template file for using github actions with terraform for terraform-infra repos
branding:
  icon: 'chevron-right'
  color: 'blue'

runs:
  using: composite
  steps:
    - name: Check out repository code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.event.issue.pull_request && format('refs/pull/{0}/head', github.event.issue.number) || '' }}

    - name: Get Head Sha
      id: sha
      uses: actions/github-script@v6
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          const headSha = pr.data.head.sha;
          core.setOutput('sha', headSha)
    

    - name: Retrieve private access key and ssh hosts
      shell: bash
      run: |
        aws --region us-east-1 ssm get-parameters --name /tri-ie/SharedServices/JenkinsMaster/GitAccessPrivateKey --with-decryption --query Parameters[0].Value --output text > ~/.ssh/id_rsa
        chmod 0400 ~/.ssh/id_rsa
        mkdir -p ~/.ssh
        ssh-keyscan -t rsa github.awsinternal.tri.global >> ~/.ssh/known_hosts
        ssh-keyscan -t rsa github.shared-services.aws.tri.global >> ~/.ssh/known_hosts

    ##############################################
    #                                            #
    #            Terraform Plan                  #
    #                                            #
    ##############################################

    - name: Create plan status check
      uses: actions/github-script@v6
      id: plan_status_check
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          const check = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'TerraformPlan',
            head_sha: `${{steps.sha.outputs.sha}}`,
            started_at: formatDate(),
            status: 'in_progress'
          })
          core.setOutput('CHECK_ID', check.data.id)

    - name: Setup Terraform
      uses: infrastructure/setup-terraform@v0.0.1
      with:
        terraform_wrapper: true
    
    - name: Terraform fmt
      id: fmt
      shell: bash
      run: terraform fmt -check
      continue-on-error: false
      working-directory: terraform

    - name: Execute terraform plan steps
      id: terraform
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          const process = require('process');

          let account_diff = [];
          let stdout = execSync("git diff origin/main --name-only terraform/modules | awk -F/ '{ print $3 }' | sort | uniq");
          account_diff = stdout.toString().trim().split('\n');

          const repoName = context.repo.repo;
          const firstHyphenIndex = repoName.indexOf('-');
          const lastHyphenIndex = repoName.lastIndexOf('-');
          const keyName = repoName.substring(firstHyphenIndex + 1, lastHyphenIndex);

          process.chdir('terraform');
          for( let i = 0; i < account_diff.length; i++) {

            execSync("rm -rf .terraform");

            stdout = execSync(`head -n 1 ${account_diff[i]}.tf | awk '{{ print $2 }}' | tr -d '\"'`);
            let module = stdout.toString().trim();

            execSync(`terraform init -no-color -input=false -get=true \
              -backend-config="bucket=tri-tf-state-us-east-1" \
              -backend-config="key=${keyName}/${account_diff[i]}/terraform.tfstate" \
              -backend-config="region=us-east-1" \
              -backend-config="dynamodb_table=tri_tf_state" \
              -backend-config="encrypt=true"`);

            stdout = execSync("terraform validate -no-color");
            let validate_out = stdout.toString().trim();
            execSync(`mkdir -p ${account_diff[i]}`);
            execSync(`terraform plan -target='module.${module}' -out=${account_diff[i]}/plan.tfplan`);
            execSync(`terraform show -no-color ${account_diff[i]}/plan.tfplan > plan.out`)

            const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
            const run_link = '<a href="' + run_url + '">Actions</a>.'
            const fs = require('fs')
            const plan_file = fs.readFileSync('plan.out', 'utf8').toString()
            const plan = plan_file.length > 65000 ? "...\n" + plan_file.substring(plan_file.length - 65000) : plan_file
            const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can see full plan in " + run_link + "<br /><br />" : ""
            const output = `Run [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            #### Changes for Account ${account_diff[i]}
            #### Terraform Format and Style ðŸ–Œ \`${{ steps.fmt.outcome }}\`
            <details><summary>Validation Output</summary>
      
            ~~~
            ${validate_out}
            ~~~
      
            </details>
      
            #### Terraform Plan ðŸ“–
      
            <details><summary>Show Plan</summary>
      
            ~~~
            ${plan}
            ~~~
      
            </details>

            Respond with \`GithubDeploy\` to deploy and merge changes.
            ${truncated_message}`;
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
          }
    - name: Update Status Check
      if: ${{ github.event.issue.pull_request && !contains(github.event.comment.body, 'GithubDeploy') && always() }}
      uses: actions/github-script@v7
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          github.rest.checks.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            check_run_id:  '${{ steps.plan_status_check.outputs.CHECK_ID }}',
            status: 'completed',
            completed_at: formatDate(),
            conclusion: '${{ steps.terraform.conclusion }}'
          })

    ##############################################
    #                                            #
    #            Terraform Apply                 #
    #                                            #
    ##############################################

    - name: Create apply status check
      if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy') }}
      uses: actions/github-script@v6
      id: apply_status_check
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          const check = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'TerraformApply',
            head_sha: `${{steps.sha.outputs.sha}}`,
            started_at: formatDate(),
            status: 'in_progress'
          })
          core.setOutput('CHECK_ID', check.data.id)

    - name: Terraform Apply
      if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy') }}
      uses: actions/github-script@v7
      id: apply
      with:
        script: |
          /*
          const { execSync } = require('child_process');
          const process = require('process');

          let account_diff = [];
          let stdout = execSync("git diff origin/main --name-only terraform/modules | awk -F/ '{ print $3 }' | sort | uniq");
          account_diff = stdout.toString().trim().split('\n');


          process.chdir('terraform');

          const repoName = context.repo.repo;
          const firstHyphenIndex = repoName.indexOf('-');
          const lastHyphenIndex = repoName.lastIndexOf('-');
          const keyName = repoName.substring(firstHyphenIndex + 1, lastHyphenIndex);
          

          for( let i = 0; i < account_diff.length; i++) {
            execSync("rm -rf .terraform");

            stdout = execSync(`head -n 1 ${account_diff[i]}.tf | awk '{{ print $2 }}' | tr -d '\"'`);
            let module = stdout.toString().trim();

            execSync(`terraform init -no-color -input=false -get=true \
              -backend-config="bucket=tri-tf-state-us-east-1" \
              -backend-config="key=${keyName}/${account_diff[i]}/terraform.tfstate" \
              -backend-config="region=us-east-1" \
              -backend-config="dynamodb_table=tri_tf_state" \
              -backend-config="encrypt=true"`);

            execSync(terraform apply -no-color -auto-approve ${account_diff[i]}/plan.tfplan > apply.out);
            */
            
          }

    - name: Post apply outputs and update status check
      if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy') && always() }}
      uses: actions/github-script@v7
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          github.rest.checks.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            check_run_id:  '${{ steps.apply_status_check.outputs.CHECK_ID }}',
            status: 'completed',
            completed_at: formatDate(),
            conclusion: '${{ steps.apply.conclusion }}'
          })

    - name: Merge Branch
      uses: actions/github-script@v6
      if: ${{ job.status == 'success' && github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy') }}
      with:
        script: |
            github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
  