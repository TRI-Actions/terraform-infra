---
name: terraform-infra
description: Template file for using github actions with terraform for terraform-infra repos
branding:
  icon: 'chevron-right'
  color: 'blue'

inputs:
  AWS_IAM_Role:
    description: 'Cross Account role arn to assume to deploy infrastructure'
    required: false
    type: String
  SSM_private_keys:
    description: "comma separated list of ssm key locations, no spaces"
    required: false
    type: String
  SSM_pat:
    description: "Location of pat token in SSM"
    required: false
    type: String

runs:
  using: composite
  steps:
    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.issue.pull_request && format('refs/pull/{0}/head', github.event.issue.number) || '' }}

    - name: Get Head Sha
      id: sha
      uses: actions/github-script@v7
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          const headSha = pr.data.head.sha;
          core.setOutput('sha', headSha)

    - name: Sign into IAM Role
      if: ${{ inputs.AWS_IAM_Role != '' }}
      uses: aws-actions/configure-aws-credentials@main
      with:
        role-to-assume: ${{ inputs.AWS_IAM_Role }}
        role-session-name: terraform-infra-session
        aws-region: us-east-1

    - name: Retrieve private access keys
      shell: bash
      run: |
        mkdir -p ~/.ssh
        iter=0
        IFS=',' read -ra ITEMS <<< "${SSM_PRIVATE_KEYS}"
        eval "$(ssh-agent -s)"
        for key in "${ITEMS[@]}"; do
          aws --region us-east-1 ssm get-parameters --name "${key}" --with-decryption --query Parameters[0].Value --output text > ~/.ssh/id_rsa_${iter}
          chmod 600 ~/.ssh/id_rsa_${iter}

          echo -e "Host *\n  IdentityFile ~/.ssh/id_rsa_${iter}\n  StrictHostKeyChecking no" >> ~/.ssh/config
          iter=$((iter + 1))
        done

        if [[ -n "${SSM_PAT}" ]]; then
          GITHUB_TOKEN=$(aws --region us-east-1 ssm get-parameters --name "${SSM_PAT}" --with-decryption --query Parameters[0].Value --output text)
          git config --global url."https://${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
          git config --global credential.helper store
        fi
      env:
        SSM_PRIVATE_KEYS: ${{ inputs.SSM_private_keys }}
        SSM_PAT: ${{ inputs.SSM_pat }}


    - name: Check if current branch is behind main
      uses: actions/github-script@v7
      with:
        script: |
          let head, base;

          if (context.eventName === 'pull_request') {

            head = context.payload.pull_request.head.ref;
            base = context.payload.pull_request.base.ref;
          } else if (context.eventName === 'issue_comment' && context.payload.issue.pull_request) {

            const prNumber = context.payload.issue.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });
            head = pr.head.ref;
            base = pr.base.ref;
          }

          console.log(`Comparing ${base}...${head}`);

          const result = await github.rest.repos.compareCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            base,
            head,
          });

          if (result.data.status === 'behind' || result.data.status === 'diverged') {
            const output = `‚ùå The branch '${head}' is behind 'main' by ${result.data.behind_by} commit(s). Please perform git pull to merge branch with main`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            core.setFailed(`‚ùå The branch '${head}' is behind 'main' by ${result.data.behind_by} commit(s). Please perform git pull to merge branch with main`);
          } else {
            console.log(`‚úÖ The branch '${head}' is up-to-date with 'main'.`);
          }

    ##############################################
    #                                            #
    #            Terraform Plan                  #
    #                                            #
    ##############################################

    - name: Create plan status check
      uses: actions/github-script@v7
      id: plan_status_check
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          const check = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'TerraformPlan',
            head_sha: `${{steps.sha.outputs.sha}}`,
            started_at: formatDate(),
            status: 'in_progress'
          })
          core.setOutput('CHECK_ID', check.data.id)

    - name: Setup Terraform
      uses: TRI-Actions/setup-terraform@v0.0.1
      with:
        terraform_wrapper: true

    - name: Terraform fmt
      id: fmt
      shell: bash
      run: terraform fmt -check
      continue-on-error: false
      working-directory: terraform

    - name: Execute terraform plan steps
      id: terraform
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          const process = require('process');

          process.chdir('terraform');

          let account_diff = [];
          let stdout = execSync("git diff origin/main --name-only modules | awk -F/ '{ print $3 }' | sort | uniq");
          account_diff = stdout.toString().trim().split('\n');

          let current_folders = []
          stdout = execSync("ls modules")
          current_folders = stdout.toString().trim().split('\n');

          const intersection = current_folders.filter(value => account_diff.includes(value));

          const repoName = context.repo.repo;
          const firstHyphenIndex = repoName.indexOf('-');
          const lastHyphenIndex = repoName.lastIndexOf('-');
          const keyName = repoName.substring(firstHyphenIndex + 1, lastHyphenIndex);

          if(intersection.length == 0) {
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: "No Changes detected in terraform scripts"
              })
          }
          for( let i = 0; i < intersection.length; i++) {

            try {
              execSync("rm -rf .terraform");

              stdout = execSync(`head -n 1 ${intersection[i]}.tf | awk '{{ print $2 }}' | tr -d '\"'`);
              let module = stdout.toString().trim();
              execSync(`terraform init -no-color -input=false -get=true \
                -backend-config="bucket=tri-tf-state-us-east-1" \
                -backend-config="key=${keyName}/${intersection[i]}/terraform.tfstate" \
                -backend-config="region=us-east-1" \
                -backend-config="dynamodb_table=tri_tf_state" \
                -backend-config="encrypt=true"`);

              stdout = execSync("terraform validate -no-color");
              let validate_out = stdout.toString().trim();
              execSync(`mkdir -p ${intersection[i]}`);
              execSync(`terraform plan -target='module.${module}' -out=${intersection[i]}/plan.tfplan`);
              execSync(`terraform show -no-color ${intersection[i]}/plan.tfplan > plan.out`)

              const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
              const run_link = '<a href="' + run_url + '">Actions</a>.'
              const fs = require('fs')
              const plan_file = fs.readFileSync('plan.out', 'utf8').toString()
              const plan = plan_file.length > 65000 ? "...\n" + plan_file.substring(plan_file.length - 65000) : plan_file
              const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can see full plan in " + run_link + "<br /><br />" : ""
              const output = `Run [#${process.env.GITHUB_RUN_NUMBER}](${run_url})\n#### Changes for Account \`${intersection[i]}\`

              #### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`


              <details><summary>Validation Output</summary>

              ~~~
              ${validate_out}
              ~~~

              </details>

              #### Terraform Plan üìñ

              <details><summary>Show Plan</summary>

              ~~~
              ${plan}
              ~~~

              </details>

              Respond with \`GithubDeploy\` to deploy and merge changes.
              ${truncated_message}`;

              const eventName = context.eventName;

              if (eventName != 'issue_comment') {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })
              }
            }
            catch (error) {
              const errorMsg = error.stderr?.toString() || error.message || error.toString();
              const err_output = `‚ùå Terraform Plan failed for account \`${intersection[i]}\`

              <details><summary>Error Output</summary>

              ~~~
              ${errorMsg}
              ~~~

              </details>`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: err_output
              });

              core.setFailed("Terraform apply failed");
            }
          }
    - name: Update Status Check
      if: ${{ github.event.issue.pull_request && !contains(github.event.comment.body, 'GithubDeploy') && always() }}
      uses: actions/github-script@v7
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }

          github.rest.checks.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            check_run_id:  parseInt(process.env.CHECK_ID),
            status: 'completed',
            completed_at: formatDate(),
            conclusion: process.env.CHECK_CONCLUSION || 'success'
          });
      env:
        CHECK_ID: ${{ steps.plan_status_check.outputs.CHECK_ID }}
        CHECK_CONCLUSION: ${{ steps.terraform.conclusion }}

    ##############################################
    #                                            #
    #            Terraform Apply                 #
    #                                            #
    ##############################################
    - name: Count Approvals
      if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy') }}
      id: count-approvals
      uses: actions/github-script@v7
      with:
        script: |
          const reviews = await github.rest.pulls.listReviews({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          const approvals = reviews.data.filter(review => review.state === 'APPROVED').length;
          core.setOutput('approvals', approvals);

############### Re-add this step after pipeline is stable #########################

#    - name: Fail if No Approvals
#      if: steps.count-approvals.outputs.approvals == 0 && github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy')
#      uses: actions/github-script@v7
#      with:
#        script: |
#          github.rest.issues.createComment({
#            issue_number: context.issue.number,
#            owner: context.repo.owner,
#            repo: context.repo.repo,
#            body: "No approvals, please have someone review your code"
#          })
#          core.setFailed()

    - name: Create apply status check
      if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy') }}
      uses: actions/github-script@v7
      id: apply_status_check
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          const check = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'TerraformApply',
            head_sha: `${{steps.sha.outputs.sha}}`,
            started_at: formatDate(),
            status: 'in_progress'
          })
          core.setOutput('CHECK_ID', check.data.id)

    - name: Terraform Apply
      if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy')}}
      uses: actions/github-script@v7
      id: apply
      with:
        script: |

          const { execSync } = require('child_process');
          const process = require('process');


          process.chdir('terraform');

          let account_diff = [];
          let stdout = execSync("git diff origin/main --name-only modules | awk -F/ '{ print $3 }' | sort | uniq");
          account_diff = stdout.toString().trim().split('\n');

          let current_folders = []
          stdout = execSync("ls modules")
          current_folders = stdout.toString().trim().split('\n');

          const intersection = current_folders.filter(value => account_diff.includes(value));

          const repoName = context.repo.repo;
          const firstHyphenIndex = repoName.indexOf('-');
          const lastHyphenIndex = repoName.lastIndexOf('-');
          const keyName = repoName.substring(firstHyphenIndex + 1, lastHyphenIndex);

          for( let i = 0; i < intersection.length; i++) {
            try {
              execSync("rm -rf .terraform");

              stdout = execSync(`head -n 1 ${intersection[i]}.tf | awk '{{ print $2 }}' | tr -d '\"'`);
              let module = stdout.toString().trim();

              execSync(`terraform init -no-color -input=false -get=true \
                -backend-config="bucket=tri-tf-state-us-east-1" \
                -backend-config="key=${keyName}/${intersection[i]}/terraform.tfstate" \
                -backend-config="region=us-east-1" \
                -backend-config="dynamodb_table=tri_tf_state" \
                -backend-config="encrypt=true"`);

              execSync(`terraform apply -no-color -auto-approve ${intersection[i]}/plan.tfplan > apply.out`);

              const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
              const run_link = '<a href="' + run_url + '">Actions</a>.'
              const fs = require('fs')
              const apply_out_file = fs.readFileSync('apply.out', 'utf8').toString()
              const apply_out = apply_out_file.length > 65000 ? "...\n" + apply_out_file.substring(apply_out_file.length - 65000) : apply_out_file
              const truncated_message = apply_out_file.length > 65000 ? "Output is too long and was truncated. You can see full apply output in " + run_link + "<br /><br />" : ""
              const output = `Run [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

              #### Terraform Apply üìñ

              <details><summary>Show Apply Output</summary>

              ~~~
              ${apply_out}
               ~~~

              </details>
              ${truncated_message}`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
                });
            }
            catch (error) {
              const errorMsg = error.stderr?.toString() || error.message || error.toString();
              const err_output = `‚ùå Terraform Apply failed for account \`${intersection[i]}\`

              <details><summary>Error Output</summary>

              ~~~
              ${errorMsg}
              ~~~

              </details>`;

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: err_output
                });
                core.setFailed("Terraform apply failed");
              }
          }

    - name: Post apply outputs and update status check
      if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy') && always() }}
      uses: actions/github-script@v7
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          github.rest.checks.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            check_run_id:  '${{ steps.apply_status_check.outputs.CHECK_ID }}',
            status: 'completed',
            completed_at: formatDate(),
            conclusion: '${{ steps.apply.conclusion }}'
          })

    - name: Merge Branch
      uses: actions/github-script@v7
      if: ${{ job.status == 'success' && github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy') }}
      with:
        script: |
            github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
